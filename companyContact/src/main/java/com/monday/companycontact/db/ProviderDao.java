package com.monday.companycontact.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.monday.companycontact.db.Provider;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROVIDER.
*/
public class ProviderDao extends AbstractDao<Provider, Long> {

    public static final String TABLENAME = "PROVIDER";

    /**
     * Properties of entity Provider.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProviderNum = new Property(1, String.class, "providerNum", false, "PROVIDER_NUM");
        public final static Property ProviderName = new Property(2, String.class, "providerName", false, "PROVIDER_NAME");
        public final static Property ProviderContactName = new Property(3, String.class, "providerContactName", false, "PROVIDER_CONTACT_NAME");
        public final static Property ProviderPhone = new Property(4, String.class, "providerPhone", false, "PROVIDER_PHONE");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property CompanyPhone = new Property(6, String.class, "companyPhone", false, "COMPANY_PHONE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Image = new Property(8, String.class, "image", false, "IMAGE");
        public final static Property Logistics = new Property(9, String.class, "logistics", false, "LOGISTICS");
        public final static Property Remark = new Property(10, String.class, "remark", false, "REMARK");
        public final static Property GroupId = new Property(11, int.class, "groupId", false, "GROUP_ID");
        public final static Property Pinyin = new Property(12, String.class, "pinyin", false, "PINYIN");
        public final static Property Pingyin2 = new Property(13, String.class, "pingyin2", false, "PINGYIN2");
    };


    public ProviderDao(DaoConfig config) {
        super(config);
    }
    
    public ProviderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROVIDER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'PROVIDER_NUM' TEXT," + // 1: providerNum
                "'PROVIDER_NAME' TEXT NOT NULL ," + // 2: providerName
                "'PROVIDER_CONTACT_NAME' TEXT," + // 3: providerContactName
                "'PROVIDER_PHONE' TEXT," + // 4: providerPhone
                "'ADDRESS' TEXT," + // 5: address
                "'COMPANY_PHONE' TEXT," + // 6: companyPhone
                "'EMAIL' TEXT," + // 7: email
                "'IMAGE' TEXT," + // 8: image
                "'LOGISTICS' TEXT," + // 9: logistics
                "'REMARK' TEXT," + // 10: remark
                "'GROUP_ID' INTEGER NOT NULL DEFAULT(1)," + // 11: groupId
                "'PINYIN' TEXT NOT NULL ," + // 12: pinyin
                "'PINGYIN2' TEXT NOT NULL );"); // 13: pingyin2
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROVIDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Provider entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String providerNum = entity.getProviderNum();
        if (providerNum != null) {
            stmt.bindString(2, providerNum);
        }
        stmt.bindString(3, entity.getProviderName());
 
        String providerContactName = entity.getProviderContactName();
        if (providerContactName != null) {
            stmt.bindString(4, providerContactName);
        }
 
        String providerPhone = entity.getProviderPhone();
        if (providerPhone != null) {
            stmt.bindString(5, providerPhone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String companyPhone = entity.getCompanyPhone();
        if (companyPhone != null) {
            stmt.bindString(7, companyPhone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
 
        String logistics = entity.getLogistics();
        if (logistics != null) {
            stmt.bindString(10, logistics);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(11, remark);
        }
        stmt.bindLong(12, entity.getGroupId());
        stmt.bindString(13, entity.getPinyin());
        stmt.bindString(14, entity.getPingyin2());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Provider readEntity(Cursor cursor, int offset) {
        Provider entity = new Provider( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // providerNum
            cursor.getString(offset + 2), // providerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // providerContactName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // providerPhone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // companyPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // image
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // logistics
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // remark
            cursor.getInt(offset + 11), // groupId
            cursor.getString(offset + 12), // pinyin
            cursor.getString(offset + 13) // pingyin2
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Provider entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProviderNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProviderName(cursor.getString(offset + 2));
        entity.setProviderContactName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProviderPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCompanyPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLogistics(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRemark(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGroupId(cursor.getInt(offset + 11));
        entity.setPinyin(cursor.getString(offset + 12));
        entity.setPingyin2(cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Provider entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Provider entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
