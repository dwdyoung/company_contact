package com.monday.companycontact.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.monday.companycontact.db.ExtraNum;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXTRA_NUM.
*/
public class ExtraNumDao extends AbstractDao<ExtraNum, Long> {

    public static final String TABLENAME = "EXTRA_NUM";

    /**
     * Properties of entity ExtraNum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ExtraNumName = new Property(1, String.class, "extraNumName", false, "EXTRA_NUM_NAME");
        public final static Property ExtraNum = new Property(2, String.class, "extraNum", false, "EXTRA_NUM");
        public final static Property ProviderId = new Property(3, Long.class, "providerId", false, "PROVIDER_ID");
    };


    public ExtraNumDao(DaoConfig config) {
        super(config);
    }
    
    public ExtraNumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXTRA_NUM' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'EXTRA_NUM_NAME' TEXT," + // 1: extraNumName
                "'EXTRA_NUM' TEXT," + // 2: extraNum
                "'PROVIDER_ID' INTEGER);"); // 3: providerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXTRA_NUM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ExtraNum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String extraNumName = entity.getExtraNumName();
        if (extraNumName != null) {
            stmt.bindString(2, extraNumName);
        }
 
        String extraNum = entity.getExtraNum();
        if (extraNum != null) {
            stmt.bindString(3, extraNum);
        }
 
        Long providerId = entity.getProviderId();
        if (providerId != null) {
            stmt.bindLong(4, providerId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ExtraNum readEntity(Cursor cursor, int offset) {
        ExtraNum entity = new ExtraNum( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // extraNumName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // extraNum
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // providerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ExtraNum entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExtraNumName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExtraNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProviderId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ExtraNum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ExtraNum entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
